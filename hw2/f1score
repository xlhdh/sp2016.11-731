#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
from string import maketrans
from string import punctuation as punct
 
# DRY
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
    # or sum(w in ref for w in f) # cast bool -> int
    # or sum(map(ref.__contains__, h)) # ugly!
def f_measure(p, r, beta):
    if p == r == 0: 
        return 0
    else: 
        return (1+beta*beta)*p*r/(beta*beta*p+r)

def word_match_2(h, ref): 
    rset = set(ref)
    if len(rset): 
        return sum(1 for w in h if w in rset)*1.0/len(rset)
    else: 
        return 10000000.0
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    # PEP8: use ' and not " for strings
    parser.add_argument('-i', '--input', default='data/train-test.hyp1-hyp2-ref',
            help='input file (default data/train-test.hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                #
                #yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
                yield [sentence.strip().translate(maketrans('',''), punct).split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        '''if len(h1)<3 or len(h2)<3 or len(ref)<3: 
            print h1
            print h2
            print ref
            print "<>"'''
        rset = set(ref)
        h1_match_p = word_match_2(h1, ref)
        h2_match_p = word_match_2(h2, ref)
        
        h1_match_r = word_match_2(ref, h1)
        h2_match_r = word_match_2(ref, h2)

        beta = 1.6

        h1_match = f_measure(h1_match_p, h1_match_r, beta)
        h2_match = f_measure(h2_match_p, h2_match_r, beta)
        #h1_match = h1_match_p * h1_match_r
        #h2_match = h2_match_p * h2_match_r

        print(-1 if h1_match > h2_match else # \begin{cases}
                (0 if h1_match == h2_match
                    else 1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
